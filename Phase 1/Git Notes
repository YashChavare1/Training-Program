What is Git?
    - Git is a distributed version control system that helps track changes in source code during software development process.
    - Git allows multiple developers to work on a project simultaneously and independently. It's designed to be fast, flexible, and reliable.


What is Github? 
	-Website that allows developer to store and manage thier code using git.


Check the  version of Git:  git --version	


Configuring Git
•	git config --global user.name "Name"
•	git config --global user.email "email Id"
•	git config --list 			// show all details related to configuration 


Initialize Git and Connect with Github
•	git init 				// create a new git repo in local
•	git remote add origin <repo_url>	// link git to github
•	git remote –v				// checking the remote repo url


Clone & Status
•	git clone <repo_url>			// Cloning a repo on our local machine
•	git status				// display the status of Code.

types of status:
•	untracked: new files that git doesn't yet tract / if want to track that file add it to Stagging
•	modified: Changes in file
•	Staged: file is ready to be committed / when we "git add" then files status are "staged"
•	unmodified: unchanged

When we modify the file - we have to do two stage process
1.	git add:  adds new or changed files from your working directory to the Git Staging area
2.	git commit -m "some message"		


Push Command: Upload local repo content to remote repo (github)
•	git push origin main			// Push code to main Branch
•	git push -u origin main		// -u means setting set upstream
set-upstream means, let git know that we will be working on current project for long time and we will be pushing the code to the current branch. we will just write git push for that.


WorkFlow 
github repo  Clone  Changes  add  commit  push


Git Branches: Creating a separate copy of the repo to work in parallel with other developers
•	git branch				// to check current branch 
•	git branch -M main			// rename current branch to main
•	git checkout <branchName> 	// navigating from current branch to new branch
•	git checkout -b <newBranch> 	// create and move to new branch
•	git branch -d <branchName> 	// to delete branch 
we cannot delete current branch, first we have to move to different branch and then delete that branch.


Merging Code: Merging a branch with main branch 
Way 1: 
•	git diff <branch name> 	// Compare current Branch with specified branchName
	Example: git diff main 	// it will compare current branch with main branch
•	git merge <branch name>	// merge current branch with specified branch
Example: git merge main	// It will merge current branch with main branch

Way 2: 
Create a pull request
pull request: It lets you tell others about changes you've pushed to a branch in a repo
	1) We will make pull request.
	2) PR will be review by Senior/Manager.
	3) At last branch will merge with main.
After the branch is push to main branch, go to main branch and run command git pull origin main to pull the git repo updated code to local system.


Resolving Merge Conflicts: An event that takes place when git is unable to automatically resolve differences in code between two commits.
git merge main // merge using command
git log // check Commits


UnDo Changes
Case 1: Stagged Changes(git add)
•	git reset <fileName>		// undo a specific file
•	git reset					// undo all staged files
Case 2: Commit the Changes
•	git reset HEAD~1		// Last changes in git is called HEAD, and we are saying reset HEAD to 1 Commit back.
Case 3: Go Many Commits Back
•	git reset <commit hash>	// It will go back to the Commit of which we have passed the hash  
•	git log				// it will give hash of commits

-	All above step will remove changes from git but not from our code.
-	To make our code same as, it was while some specific commit git reset --hard <hash>. It will make all code same as it was while hash commit.


FORK: A fork is a new Repo that shares the code and visibility settings with the original "upstream" repo
In Fork, we can clone the someone else repo into our account and make changes and push code in out github repo and can make a pull request to that original account to merge our updated code to their repo.